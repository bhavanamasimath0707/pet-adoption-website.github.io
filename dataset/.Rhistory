attach(PlantGrowth)
View(PlantGrowth)
with(PlantGrowth, tapply(weight, group, mean))
with(PlantGrowth, tapply(weight, group, var))
with(PlantGrowth, bartlett.test(weight ~ group))
# instead of running an ANOVA with aov(), we will run a linear regression with lm()
lm.out = with(PlantGrowth, lm(weight ~ group))
summary(lm.out)
###There is a difference, but where does this difference lie? Post Hoc test:
aov.out <- aov(lm.out) # we can ask for the corresponding ANOVA table
TukeyHSD(aov.out)
with(PlantGrowth, tapply(weight, group, mean))
with(PlantGrowth, tapply(weight, group, var))
#homogenity of variance #test assumptions
bartlett.test(count ~ spray, data=InsectSprays)
with(PlantGrowth, bartlett.test(weight ~ group))
# instead of running an ANOVA with aov(), we will run a linear regression with lm()
lm.out = with(PlantGrowth, lm(weight ~ group))
summary(lm.out)
###There is a difference, but where does this difference lie? Post Hoc test:
aov.out <- aov(lm.out) # we can ask for the corresponding ANOVA table
TukeyHSD(aov.out)
x <- c(237,289,257,228,303,275,262,304,244,233)
y <- c(194,240,230,186,265,222,242,281,240,212)
d <- c(43,49,27,42,38,53,20,23,4,21)
shapiro.test(d)
x <- c(237,289,257,228,303,275,262,304,244,233)
shapiro.test(x)
shapiro.test(y)
t.test(x,y,alternative="less",paired=TRUE)
t.test(d,alternative="less",paired=TRUE)
t.test(x,y,,alternative="less",paired=TRUE)
t.test(x,y,,alternative="greater",paired=TRUE)
# instead of running an ANOVA with aov(), we will run a linear regression with lm()
lm.out = with(PlantGrowth, lm(weight ~ group))
TukeyHSD(lm.out)
drug <- c(x,y)
# instead of running an ANOVA with aov(), we will run a linear regression with lm()
lm.out = with(drug, lm(x ~ y))
# instead of running an ANOVA with aov(), we will run a linear regression with lm()
lm.out = with(d, lm(x ~ y))
TukeyHSD(d)
drug <- c("x","y")
# instead of running an ANOVA with aov(), we will run a linear regression with lm()
lm.out = with(drug, lm(x ~ y))
drug <- data.frame(x,y)
# instead of running an ANOVA with aov(), we will run a linear regression with lm()
lm.out = with(drug, lm(x ~ y))
###There is a difference, but where does this difference lie? Post Hoc test:
aov.out <- aov(lm.out) # we can ask for the corresponding ANOVA table
TukeyHSD(d)
TukeyHSD(drug)
TukeyHSD(lm.out)
TukeyHSD(aov.out)
x <- c(237,289,257,228,303,275,262,304,244,233)
y <- c(194,240,230,186,265,222,242,281,240,212)
d <- c(43,49,27,42,38,53,20,23,4,21)
groups <- c(rep(1,10),rep(2,10))
drug <- data.frame(x,y)
set <- c(x,y,d)
out <- aov(drug~as.factor(groups),data = set)
View(drug)
drug <- data.frame(x,y,d)
with(drug, bartlett.test(x ~ y))
chisq.test(x,y)
t.test(x,y,paired = TRUE,var.equal = TRUE,alternative = c("greater"))
source('C:/Users/user/ucuncu_sinif/sc/final/hypo_test.R', echo=TRUE)
t.test(x,y,paired = TRUE,var.equal = TRUE,alternative = c("two.sided"))
greater
t.test(x,y,paired = TRUE,var.equal = TRUE,alternative = c("greater"))
t.test(x,y,paired = TRUE,var.equal = TRUE,alternative = c("greater"))
t.test(x,y,paired = TRUE,var.equal = TRUE,alternative = c("greater"))
var.test(x,y)
t=read.csv("w.csv")
Location=t$Location
#Finding the count of "NA" values within each feature of the dataset
count= sort(sapply(t, function(y) sum(length(which(is.na(y))))))
#Percentage of "NA" values within each feature of the dataset
countpercent=sapply(t, function(y) round(sum(length(which(is.na(y))))/nrow(t)*100))
#Extracting name of features - having "NA" values more than 1/3 of its number of observations
na_count=which(count>nrow(t)/3)
names=names(na_count)
par(mar=c(5,5.3,4,2))
t=t %>% select(-RISK_MM,-Date,-Location,-names)
#Finding the count of "NA" values within each feature of the dataset.
count2=sapply(t, function(y) sum(length(which(is.na(y)))))
#Percentage of "NA" values within each feature
count2percent=sort(sapply(t, function(y) round(sum(length(which(is.na(y))))/nrow(t)*100)))
t$RainToday <- ifelse(t$RainToday=="Yes", 1, 0)
t$RainToday= factor(t$RainToday)
t$RainTomorrow <- ifelse(t$RainTomorrow=="Yes", 1, 0)
t$RainTomorrow=factor(t$RainTomorrow)
registerDoParallel(cores = 14)
getDoParWorkers()
library(naniar)
library(missRanger)
library(doParallel)
library(ggplot2)
library(tidyverse)
library(onehot)
library(data.table)
library(mltools)
library(caret)
library(car)
library(dplyr)
library(ggplot2)
require(xgboost)
library(DiagrammeR)
library(rpart)
library(rpart.plot)
library(corrplot)
library(VIM)
library(randomForest)
library(ggplot2)
library(graphics)
t=t %>% select(-RISK_MM,-Date,-Location,-names)
#Finding the count of "NA" values within each feature of the dataset.
count2=sapply(t, function(y) sum(length(which(is.na(y)))))
#Percentage of "NA" values within each feature
count2percent=sort(sapply(t, function(y) round(sum(length(which(is.na(y))))/nrow(t)*100)))
t$RainToday <- ifelse(t$RainToday=="Yes", 1, 0)
t$RainToday= factor(t$RainToday)
t$RainTomorrow <- ifelse(t$RainTomorrow=="Yes", 1, 0)
t$RainTomorrow=factor(t$RainTomorrow)
registerDoParallel(cores = 14)
getDoParWorkers()
Weather_Imp_t <- missRanger(t, pmm.k = 3, splitrule = "extratrees", num.trees = 100)
Weather_Imp=Weather_Imp_t
Weather_Imp=cbind(Location,Weather_Imp)
temp_weather_imp=Weather_Imp
names(Weather_Imp)
library(caTools)
set.seed(123)
split = sample.split(Weather_Imp1$RainTomorrow, SplitRatio = 0.75)
training_set = subset(Weather_Imp1, split == TRUE)
test_set = subset(Weather_Imp1, split == FALSE)
names(test_set)
#Scaling the datasets
training_set_sc=training_set[,50:55] %>%
mutate_if(is.numeric, scale)
test_set_sc=test_set[,50:55] %>%
mutate_if(is.numeric, scale)
training_set=cbind(training_set[1:49],training_set_sc,training_set[56:105])
str(training_set)
test_set=cbind(training_set[1:49],training_set_sc,training_set[56:105])
library(caTools)
set.seed(123)
split = sample.split(Weather_Imp1$RainTomorrow, SplitRatio = 0.75)
training_set = subset(Weather_Imp1, split == TRUE)
test_set = subset(Weather_Imp1, split == FALSE)
names(test_set)
#Scaling the datasets
training_set_sc=training_set[,50:55] %>%
mutate_if(is.numeric, scale)
test_set_sc=test_set[,50:55] %>%
mutate_if(is.numeric, scale)
training_set=cbind(training_set[1:49],training_set_sc,training_set[56:105])
str(training_set)
test_set=cbind(training_set[1:49],training_set_sc,training_set[56:105])
data <- read.csv("data.csv")
#POST-HOC TEST
#tukeyhsd()
TukeyHSD(aov.out)
PlantGrowth
###There is a difference, but where does this difference lie? Post Hoc test:
aov.out <- aov(lm.out) # we can ask for the corresponding ANOVA table
# instead of running an ANOVA with aov(), we will run a linear regression with lm()
lm.out = with(PlantGrowth, lm(weight ~ group))
summary(lm.out)
###There is a difference, but where does this difference lie? Post Hoc test:
aov.out <- aov(lm.out) # we can ask for the corresponding ANOVA table
TukeyHSD(lm.out)
getwd()
setwd("..")
setwd("ucuncu_sinif")
setwd("wm")
setwd("project")
setwd("app3")
data <- read.csv("data.csv")
shiny::runApp()
getwd()
setwd("..")
setwd("app4")
runApp()
getwd()
setwd("..")
setwd("app3")
getwd()
runApp()
View(data)
runApp()
getwd()
setwd("..")
setwd("app4")
runApp()
runApp()
setwd("..")
setwd("app3")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
cbind(data, name)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
library(randomNames)
library(randomNames)
data$name -> randomNames(128, which.names="first")
data$name <- randomNames(128, which.names="first")
select(data, -c(name))
View(data)
select(data, -name)
select(data, -10)
data <- select(data, -10)
#data <- select(data, -10)
data$Name <- randomNames(128, which.names="first")
data$Breed <- rep("Dog", times = 128)
data <- read.csv("data.csv")
data$Sex <- sex(128, 2 = c("Male", "Female"), prob = c(0.51219512195122,
0.48780487804878), name = "Sex")
data$Sex <- sex(128, x = c("Male", "Female"), prob = c(0.51219512195122,
0.48780487804878), name = "Sex")
data$Sex <- sex(128, x = c("Male", "Female"), prob = c(0.51219512195122,
0.48780487804878), name = "sex")
data$Sex <- sex(128, x = c("Male", "Female"), prob = c(0.51219512195122,
0.48780487804878))
data$Sex <- rep(128, x = c("Male", "Female"), prob = c(0.51219512195122,
0.48780487804878))
runApp()
data$Name <- randomNames(128, which.names="first")
View(data)
data$Breed <- rep("Dog", times = 128)
runApp()
runApp()
data <- read.csv("data.csv")
data$Name <- randomNames(128, which.names="first")
data$Breed <- rep("Dog", times = 128)
data$x <- floor(runif(128, min=1000, max=4000))
data$x <- "dg" + floor(runif(128, min=1000, max=4000))
data <- read.csv("data.csv")
data$Name <- randomNames(128, which.names="first")
data$Breed <- rep("Dog", times = 128)
#data$x <- "dg" + floor(runif(128, min=1000, max=4000))
data$y <- rep("x", times = 35, "y", times = 40)
data$y <- rep("meeeen", times = 35)
data <- read.csv("data.csv")
data$Name <- randomNames(128, which.names="first")
data$Breed <- rep("Dog", times = 128)
#data$x <- "dg" + floor(runif(128, min=1000, max=4000))
data$y <- rep("men", times = 64)
data$y <- rep("meeeen", times = 64)
View(data)
runApp()
data$Height <- floor(runif(128, min=15, max=90))
View(data)
data$Weight <- floor(runif(128, min=3, max=100)) #weight
data$Weight <- floor(runif(128, min=3, max=35)) #weight
shiny::runApp()
data$ID <- sample(1000:4000,128,replace=F)
View(data)
data$From <- sample(c("Shelter", "Owner"), 128, T)
View(data)
substr("abcdef", 2, 4)
data$FromInfo <- substr(data$From, 1, 2)
View(data)
data$SpeciesInfo <- substr(data$Breed, 0, 1)
View(data)
data$From <- sample(c("SHELTER", "OWNER"), 128, T)
data$FromInfo <- substr(data$From, 1, 2)
View(data)
names(data)[names(data) == "Species"] <- "Breeed"
names(data)[names(data) == "Breed"] <- "Species"
names(data)[names(data) == "Breeed"] <- "Breed"
data <- select(data,-c(12))
data$Age <- sample(1:13,128,replace=T) #age part
data$Sex <- sample(c("Male", "Female"), 128, T)
data$SpecialConditions <- sample(c("-", "Explanations"), 128, T)
data$Neutered <- sample(c("Yes", "No"), 128, T, prob = c(0.8,0.2))
data$SpecialConditions <- sample(c("-", "Explanations"), 128, T, prob = c(0.8,0.2))
print(data$Sex == "Female")
print(count(data$Sex == "Female"))
print(length(data$Sex == "Female"))
print(sum(data$Sex == "Female"))
if(data$Sex == "Female"){
data$Pregnancy <- sample(c("-", "Yes"), 65, T, prob = c(0.8,0.2))
}else{
data$Pregnancy <- sample(c("No"), 63, F)
}
if(data$Sex == "Female"){
data$Pregnancy <- sample(c("-", "Yes"), 65, T, prob = c(0.8,0.2))
}
if(data$Sex == "Male"){
data$Pregnancy <- sample(c("No"), 63, F)
}
if(data$Sex == "Female"){
data$Pregnancy <- sample(c("-", "Yes"), 65, T, prob = c(0.8,0.2))
}
if(data$Sex == "Male"){
data$Pregnancy <- c("No")
}
if(data$Sex == "Female"){
data$Pregnancy <- sample(c("-", "Yes"), 65, T, prob = c(0.8,0.2))
}
if(data$Sex == "Male"){
data$Pregnancy <- "No"
}
if(data$Neutered == "No" & data$Sex == "Female"){
data$Pregnancy <- "Yes"
}
data$Pregnancy <- "No"
if(data$Neutered == "No" & data$Sex == "Female"){
data$Pregnancy <- "Yes"
}
if(Neutered == "No" & Sex == "Female"){
Pregnancy <- "Yes"
}
data$Pregnancy <- "No"
if(data$Neutered == "No" & data$Sex == "Female"){
data$Pregnancy <- "Yes"
}
if(data$Neutered == "No" & data$Sex == "Female"){
Pregnancy <- "Yes"
}
View(data)
data <- select(data,-c(22))
iris$Pregnancy <- ifelse(data$Neutered = "No", "Yes", "No")
data$Pregnancy <- ifelse(data$Neutered == "No", "Yes", "No")
data$Pregnancy <- ifelse(data$Neutered == "No" & data$Sex == "Female", "Yes", "No")
data$Adopted <- sample(c("Yes", "No"), 128, T, prob = c(0.3,0.7))
data$Adopted <- sample(c("Yes", "No"), 128, T, prob = c(0.3,0.7))
data$HomeFoster <- sample(c("Yes", "No"), 128, T, prob = c(0.4,0.6))
data$RemoteFoster <- sample(c("Yes", "No"), 128, T, prob = c(0.8,0.2))
data$Caretaker <- sample(c("Yes", "No"), 128, T, prob = c(0.2,0.8))
data$Status <- if(data$Neutered == "No"){data$Status <- "Yes"}
data$Status <- "No"
data$Status <- if(data$Neutered == "No"){data$Status <- "Yes"}
data$Status <- "No"
data$Status <- if(data$Neutered == "No"){data$Status <- "Yes"}
data$Status <- "No"
if(data$Neutered == "No"){data$Status <- "Yes"}
data$Status <- "HEYYYY"
data$Status <- ifelse(data$Adopted == "Yes", "Yes", "No")
data$Status <- ifelse(data$Adopted == "Yes", "Adopted", "ReadyForAdoption")
data$Status <- ifelse(data$HomeFoster == "Yes", "HomeFostered", "ReadyForHomeFpster")
data$Status <- ifelse(data$Adopted == "Yes", "NotAvailable", "Ready")
data$Status <- ifelse(data$Adopted == "Yes", "NotAvailable", "Ready")
data$Status <- ifelse(data$Status == "Ready" & data$HomeFoster == "No", "ReadyForHomeFoster", "NotReady")
data$AdoptStatus <- ifelse(data$Adopted == "Yes", "NotAvailable", "Ready")
data$Status <- ifelse(data$Status == "Ready" & data$HomeFoster == "No", "ReadyForHomeFoster", "NotReady")
data$AdoptStatus <- ifelse(data$Adopted == "Yes", "NotAvailable", "Ready")
data$Status <- ifelse(data$AdoptStatus == "Ready" & data$HomeFoster == "No", "ReadyForHomeFoster", "NotReadyforHomeFoster")
data$AdoptStatus <- ifelse(data$Adopted == "Yes", "NotAvailable", "Ready")
data$HomeFosterStatus <- ifelse(data$AdoptStatus == "Ready" & data$HomeFoster == "No", "ReadyForHomeFoster", "NotReadyforHomeFoster")
data$ReFosterStatus <- ifelse(data$AdoptStatus == "Ready" & data$HomeFoster == "No",data$From == "Shelter", "ReadyForRemoteFoster", "NotReadyforRemoteFoster")
data$AdoptStatus <- ifelse(data$Adopted == "Yes", "NotAvailable", "Ready")
data$HomeFosterStatus <- ifelse(data$AdoptStatus == "Ready" & data$HomeFoster == "No", "ReadyForHomeFoster", "NotReadyforHomeFoster")
data$ReFosterStatus <- ifelse(data$AdoptStatus == "Ready" & data$From == "Shelter" & data$HomeFoster == "No", "ReadyForRemoteFoster", "NotReadyforRemoteFoster")
data <- select(data,-c(27))
data$AdoptStatus <- ifelse(data$Adopted == "Yes", "DogHasGone", "DogReady")
data$HomeFosterStatus <- ifelse(data$AdoptStatus == "DogReady" & data$HomeFoster == "No", "ReadyHF", "NotReadyHF")
data$AdoptStatus <- ifelse(data$Adopted == "Yes", "NotReadyA", "ReadyA")
data$HomeFosterStatus <- ifelse(data$AdoptStatus == "ReadyA" & data$HomeFoster == "No", "ReadyHF", "NotReadyHF")
data$AdoptStat <- ifelse(data$Adopted == "Yes", "NotReadyA", "ReadyA")
data$HomeFosterStat <- ifelse(data$AdoptStat == "ReadyA" & data$HomeFoster == "No", "ReadyHF", "NotReadyHF")
data$RemoteFosterStat <- ifelse(data$AdoptStat == "ReadyA" & data$HomeFoster == "No" & data$From == "Shelter", "ReadyRF", "NotReadyRF")
data$RemoteFosterStat <- ifelse(data$AdoptStat == "ReadyA" & data$HomeFoster == "No" & data$From == "Shelter"& data$RemoteFoster == "No","ReadyRF", "NotReadyRF")
data$AdoptStat <- ifelse(data$Adopted == "Yes", "NotReadyA", "ReadyA")
data$HomeFosterStat <- ifelse(data$AdoptStat == "ReadyA" & data$HomeFoster == "No", "ReadyHF", "NotReadyHF")
data$RemoteFosterStat <- ifelse(data$HomeFosterStat == "ReadyHF" & data$From == "Shelter"& data$RemoteFoster == "No","ReadyRF", "NotReadyRF")
data <- select(data,-c(27))
data <- select(data,-c(28))
data <- select(data,-c(29))
data$RemoteFosterStat <- ifelse(data$HomeFosterStat == "ReadyHF" & data$From == "Shelter"& data$RemoteFoster == "No","ReadyRF", "NotReadyRF")
data$RemoteFosterStat <- ifelse(data$HomeFosterStat == "ReadyHF" & data$RemoteFoster == "No","ReadyRF", "NotReadyRF")
data$CaretakerStat <- ifelse(data$From == "Owner" & data$Caretaker == "No", "ReadyCT", "NotReadyCT")
data$CaretakerStat <- ifelse(data$From == "OWNER" & data$Caretaker == "No", "ReadyCT", "NotReadyCT")
data$UniqueNum <- sample(1000:4000,128,replace=F) #id unique num
data <- select(data,-c(14))
ready <- filter(data, HomeFosterStat == "ReadyHF", RemoteFosterStat == "ReadyRF", AdoptStat == "ReadyA", CaretakerStat == "ReadyCT")
ready <- filter(data, HomeFosterStatus == "ReadyHF", RemoteFosterStat == "ReadyRF", AdoptStat == "ReadyA", CaretakerStat == "ReadyCT")
View(ready)
ready <- filter(data, HomeFosterStatus == "ReadyHF"| RemoteFosterStat == "ReadyRF"| AdoptStat == "ReadyA"| CaretakerStat == "ReadyCT")
View(ready)
names(data)[names(data) == "HomeFosterStatus"] <- "HomeFosterStat"
library(tidyr)
data$gat <- gather(data$From,data$SpeciesInfo,data$UniqueNum)
data$gat <- cbind(data$From,data$SpeciesInfo,data$UniqueNum)
data$gat <- cbind(From,SpeciesInfo,UniqueNum)
data$gat <- rbind(data$From,data$SpeciesInfo,data$UniqueNum)
data$redi <- unite(data, UniqueNum, FromInfo, -SpeciesInfo, sep="")
View(data)
data <- select(data,-c(20:30)
data <- select(data,-c(20:30))
data <- select(data,-c(-32))
data <- select(data,-c(-31))
data <- data[, -c(30:32)]
View(ready)
View(data)
data$UniqueNum <- sample(1000:4000,128,replace=F) #id unique num
write.csv(data,"version2.csv")
data$x <- paste(data$UniqueNum,data$FromInfo,data$SpeciesInfo)
data$ID <- paste(data$FromInfo,data$SpeciesInfo,data$UniqueNum)
data$ID <- gsub(" ", "", data$ID, fixed = TRUE)
data <- data[, -31]
write.csv(data,"version3.csv")
runApp()
data <- data[, -30]
data <- data[, 26:29]
data2 <- read.csv("version3.csv")
View(data2)
data2 <- data2[, -31]
data2 <- data2[, -30]
data2 <- data2[, -29]
data2 <- data2[, -28]
data2 <- data2[, -27]
data2 <- data2[, -1]
data2 <- data2[, -16]
data2 <- data2[, -15]
#write.csv(data,"user.csv")
write.csv(data,"user.csv")
write.csv(data2,"user.csv")
data <- read.csv("user.csv")
runApp()
data <- read.csv("user.csv")
runApp()
View(data)
View(data)
runApp()
runApp()
runApp()
data <- read.csv("user.csv")
data <- read.csv("user.csv")
library(shinyjs)
library(dbplyr)
runApp()
data <- read.csv("user.csv")
data <- read.csv("user.csv")
runApp()
runApp()
runApp()
data <- read.csv("whole.csv")
runApp()
data <- read.csv("data.csv")
runApp()
data <- read.csv("user.csv")
runApp('C:/Users/user/Desktop/TEZ/wm/project/adopt-or-home-foster')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp('C:/Users/user/Desktop/TEZ/wm/project/app4')
runApp('C:/Users/user/Desktop/dataset')
runApp('C:/Users/user/Desktop/TEZ/wm/project/app4')
runApp('C:/Users/user/Desktop/dataset')
runApp('C:/Users/user/Desktop/dataset')
runApp('C:/Users/user/Desktop/dataset')
runApp('C:/Users/user/Desktop/dataset')
runApp('C:/Users/user/Desktop/dataset')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
